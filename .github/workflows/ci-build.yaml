name: Enterprise - build

on:
  push:
    branches:
      - gh-readonly-queue/main/**
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Test building of packages
    runs-on:
      group: cgi-builder-${{ matrix.arch }}

    strategy:
      matrix:
        arch: ["x86_64", "aarch64"]
      fail-fast: false

    container:
      image: ghcr.io/wolfi-dev/sdk:latest@sha256:fe85df7dc646f29552dab0ebd7e6e6e1cc6f4a5ce83e724693cf0fece5b8f8ac
      options: |
        --cap-add NET_ADMIN --cap-add SYS_ADMIN --security-opt seccomp=unconfined --security-opt apparmor:unconfined

    permissions:
      packages: read
      contents: read
      pull-requests: read
      id-token: write

    env:
      PROJECT: prod-images-c6e5
      FQ_SERVICE_ACCOUNT: prod-images-ci@prod-images-c6e5.iam.gserviceaccount.com

    outputs:
      packages_were_built: ${{ steps.file_check.outputs.exists }}

    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: "recursive"
          token: ${{ secrets.ENTERPRISE_GRAFANA_ADVISORY_ACCESS }}

      - name: "Trust the github workspace"
        run: |
          # This is to avoid fatal errors about "dubious ownership" because we are
          # running inside of a container action with the workspace mounted in.
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: check changes
        uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50 # v2.11.1
        id: changes
        with:
          filters: |
            change:
              - "*.yaml"
              - "*.env"
              - "Makefile"
              - ".github/workflows/dag-push-enterprise.yaml"

      - name: Generate snapshot date
        if: steps.changes.outputs.change == 'true'
        id: snapshot-date
        run: |
          echo "date=$(date -u +%Y%m%d)" >> "$GITHUB_OUTPUT"
          echo "epoch=$(date -u +%s)" >> "$GITHUB_OUTPUT"
        shell: bash

      - uses: google-github-actions/auth@35b0e87d162680511bf346c299f71c9c5c379033 # v1.1.1
        if: steps.changes.outputs.change == 'true'
        with:
          workload_identity_provider: "projects/618116202522/locations/global/workloadIdentityPools/prod-shared-e350/providers/prod-shared-gha"
          service_account: ${{ env.FQ_SERVICE_ACCOUNT }}

      - if: steps.changes.outputs.change == 'true'
        run: |
          # TODO: Replace this with a wolfi image :(
          apk add google-cloud-sdk

      - uses: google-github-actions/setup-gcloud@e30db14379863a8c79331b04a9969f4c1e225e0b # v1.1.1
        if: steps.changes.outputs.change == 'true'
        with:
          project_id: ${{ env.PROJECT }}

      - name: "Generate local signing key"
        if: steps.changes.outputs.change == 'true'
        run: |
          make MELANGE="melange" local-melange-enterprise.rsa

      - name: "Sync public package repository"
        if: steps.changes.outputs.change == 'true'
        run: |
          mkdir -p "./packages/${{ matrix.arch }}"
          gsutil -m rsync -r gs://chainguard-enterprise-registry-destination/os/${{ matrix.arch }}/ "./packages/${{ matrix.arch }}/"

          # hack to ensure our make targets are dependent appropriately
          find "./packages" -print -exec touch \{} \;

          gsutil cp gs://chainguard-enterprise-registry-destination/os/chainguard-enterprise.rsa.pub "./packages/"

          # Create reference file for cutoff time, so we can tell which packages were created after this point
          touch -d "$(date +'%Y-%m-%d %H:%M:%S')" build_cutoff_time_reference

      - name: "Build Enterprise packages"
        if: steps.changes.outputs.change == 'true'
        run: |
          make --debug MELANGE_EXTRA_OPTS="--create-build-log --keyring-append ./packages/chainguard-enterprise.rsa.pub" REPO="./packages" -j1 all

      - name: Identify newly built packages
        id: list_built_packages
        run: |
          {
            echo 'files_to_upload<<EOF'

            if [[ -e build_cutoff_time_reference ]]; then
              find ./packages -type f -newer build_cutoff_time_reference -name '*.apk'
            fi

            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Check for file
        if: steps.changes.outputs.change == 'true'
        id: file_check
        run: |
          if test -f "packages.log"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Check sonames
        if: ${{ steps.file_check.outputs.exists == 'true' && steps.changes.outputs.change == 'true'}}
        run: |
          wolfictl check so-name

      - name: Check diff
        if: ${{ steps.file_check.outputs.exists == 'true' && steps.changes.outputs.change == 'true'}}
        # Let's not fail the whole job if this step fails as it is for improved UX rather than an enforced check
        continue-on-error: true
        run: |
          wolfictl check diff

      - name: Check for diff file
        if: steps.changes.outputs.change == 'true'
        id: diff_file_check
        run: |
          if test -f "diff.log"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 'Upload built packages to GitHub artifacts'
        uses: actions/upload-artifact@v3
        with:
          path: |
            ${{ steps.list_built_packages.outputs.files_to_upload }}
            ./packages.log
          name: packages-${{ matrix.arch }}
          retention-days: 1
          if-no-files-found: warn

  scan:
    name: "Scan packages for CVEs"
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/wolfi-dev/sdk:latest@sha256:fe85df7dc646f29552dab0ebd7e6e6e1cc6f4a5ce83e724693cf0fece5b8f8ac
    needs: build
    if: needs.build.outputs.packages_were_built == 'true'

    steps:
      - name: 'Retrieve x86_64 packages'
        uses: actions/download-artifact@v3
        with:
          name: packages-x86_64
          path: /tmp/artifacts-1/

      - name: 'Retrieve aarch64 packages'
        uses: actions/download-artifact@v3
        with:
          name: packages-aarch64
          path: /tmp/artifacts-2/

      - name: 'Collect packages from all architectures into one place'
        run: |
          cd /tmp/artifacts-1

          # Put the packages into one place
          mv /tmp/artifacts-2/packages/* ./packages/

          # Merge the build log ("packages.log") files
          cat /tmp/artifacts-2/packages.log >> ./packages.log

      - name: 'Retrieve Wolfi advisory data'
        uses: actions/checkout@v4
        with:
          repository: 'wolfi-dev/advisories'
          path: 'data/wolfi-advisories'

      - name: 'Retrieve enterprise advisory data'
        uses: actions/checkout@v4
        with:
          repository: 'chainguard-dev/enterprise-advisories'
          path: 'data/enterprise-advisories'
          ref: 'main'
          token: ${{ secrets.ENTERPRISE_GRAFANA_ADVISORY_ACCESS }}

      - name: Scan for CVEs
        run: |
          wolfictl scan \
            --build-log \
            --advisories-repo-dir 'data/wolfi-advisories' \
            --advisories-repo-dir 'data/enterprise-advisories' \
            --advisory-filter 'all' \
            --require-zero \
            /tmp/artifacts-1 \
            2> /dev/null # The error message renders strangely on GitHub Actions, and the important information is already being sent to stdout.
