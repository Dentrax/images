name: Enterprise - build

on:
  push:
    branches:
      - gh-readonly-queue/main/**
  pull_request:
    branches:
      - main

jobs:
  changes:
    permissions:
      contents: read

    name: Determine packages to test building
    runs-on: ubuntu-latest
    outputs:
      packages: ${{steps.package-list.outputs.packages}}

    steps:
      - uses: actions/checkout@v4

      - name: Look for changed files
        id: changes
        uses: tj-actions/changed-files@716b1e13042866565e00e85fd4ec490e186c4a2f #tj-actions/changed-files@v41.0.1
        with:
          files_yaml: |
            melange:
              - ./*.yaml # Only top level files without structure
              - ./*/*/*.melange.yaml # Support recursive melange files with the new naming convention.

      - name: "Install wolfictl onto PATH"
        run: |
          # Copy wolfictl out of the wolfictl image and onto PATH
          TMP=$(mktemp -d)
          docker run --rm -i -v $TMP:/out --entrypoint /bin/sh ghcr.io/wolfi-dev/sdk:latest@sha256:faf2d69b08630162837a98d3e83f7c129a0322cb8236ac46f9e2e3e5fd2300ee -c "cp /usr/bin/wolfictl /out"
          echo "$TMP" >> $GITHUB_PATH

      # Assuming that we have a list of changed files such as `foo.yaml` and `bar.yaml`, this
      # strips the list down into `foo` and `bar`.
      - name: Build package list
        id: package-list
        run: |
          printf "packages=" >> $GITHUB_OUTPUT

          wolfictl text -t name --pipeline-dir=./pipelines/ \
              -r https://packages.wolfi.dev/os \
              -k https://packages.wolfi.dev/os/wolfi-signing.rsa.pub \
              -r https://packages.wolfi.dev/bootstrap/stage3 \
              -k https://packages.wolfi.dev/bootstrap/stage3/wolfi-signing.rsa.pub > packages-list
          while read pkg; do
            for file in ${{ steps.changes.outputs.melange_all_changed_files }}; do
              # Since the file is a path, we need to strip out only the file
              # name from it.
              base_file=$(basename $file)
              base_file="${base_file%.melange.yaml}"
              base_file="${base_file%.yaml}"
              printf "base_file: $base_file"
              [ "${base_file}" = "$pkg" ] && printf "%s " ${base_file} >> $GITHUB_OUTPUT
            done
          done < packages-list

          printf "\n" >> $GITHUB_OUTPUT

  build:
    name: Test building of packages
    runs-on:
      group: cgi-builder-${{ matrix.arch }}
    timeout-minutes: 600 # default is 360

    strategy:
      matrix:
        arch: ["x86_64", "aarch64"]
      fail-fast: false
    needs: changes

    container:
      image: ghcr.io/wolfi-dev/sdk:latest@sha256:faf2d69b08630162837a98d3e83f7c129a0322cb8236ac46f9e2e3e5fd2300ee
      # TODO: Deprivilege
      options: |
        --cap-add NET_ADMIN --cap-add SYS_ADMIN --device /dev/fuse --security-opt seccomp=unconfined --security-opt apparmor:unconfined

    permissions:
      packages: read
      contents: read
      pull-requests: read
      id-token: write

    env:
      PROJECT: prod-images-c6e5
      FQ_SERVICE_ACCOUNT: prod-images-ci@prod-images-c6e5.iam.gserviceaccount.com

    outputs:
      packages_were_built: ${{ steps.file_check.outputs.exists }}

    steps:
      - uses: chainguard-dev/octo-sts-action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
        id: octo-sts
        with:
          scope: chainguard-dev
          identity: enterprise-presubmit-build

      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: "recursive"
          token: ${{ steps.octo-sts.outputs.token }}

      - name: "Trust the github workspace"
        run: |
          # This is to avoid fatal errors about "dubious ownership" because we are
          # running inside of a container action with the workspace mounted in.
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Generate snapshot date
        id: snapshot-date
        run: |
          echo "date=$(date -u +%Y%m%d)" >> "$GITHUB_OUTPUT"
          echo "epoch=$(date -u +%s)" >> "$GITHUB_OUTPUT"
        shell: bash

      - uses: google-github-actions/auth@f6de81663f7788d05bd15bcce18f0e57f23f0846 # v2.0.1
        with:
          workload_identity_provider: "projects/618116202522/locations/global/workloadIdentityPools/prod-shared-e350/providers/prod-shared-gha"
          service_account: ${{ env.FQ_SERVICE_ACCOUNT }}

      - name: "Generate local signing key"
        run: |
          make MELANGE="melange" local-melange-enterprise.rsa

          # Touch it with the epoch date to convince `make` that we don't need to
          # rebuild the targets that depend on this (all)
          touch -d @0 local-melange-enterprise.rsa

      - name: 'Prepare package repository'
        run: |
          # yay wolfi!
          apk add gcsfuse

          # Set up a gcsfuse RO mount to the public bucket. This is a cheap and
          # cheerful way to recreate the make targets (class A HEADs) locally
          # without syncing the whole bucket (class A+B).
          mkdir -p /gcsfuse/enterprise-registry
          gcsfuse -o ro --implicit-dirs --only-dir os chainguard-enterprise-registry-destination /gcsfuse/enterprise-registry

          mkdir -p ./packages/${{ matrix.arch }}
          # Symlink the gcsfuse mount to ./packages/ and the pub key to workaround the Makefile CWD assumptions
          ln -s /gcsfuse/enterprise-registry/${{ matrix.arch }}/*.apk ./packages/${{ matrix.arch }}/

          # Make a copy of the APKINDEX.* since we'll need to write to it on package builds
          cp /gcsfuse/enterprise-registry/${{ matrix.arch }}/APKINDEX.* ./packages/${{ matrix.arch }}/

          # Ensure the file exists at all, so we can upload it as an artifact.
          touch packages.log

      - name: 'Build Enterprise Packages'
        run: |
          # Setup the melange cache dir on the host so we can use that in subsequent builds
          mkdir ../.melangecache
          for package in ${{needs.changes.outputs.packages}}; do
            make MELANGE_EXTRA_OPTS="--create-build-log --cache-dir=$(pwd)/../.melangecache --keyring-append=/gcsfuse/enterprise-registry/chainguard-enterprise.rsa.pub" REPO="$GITHUB_WORKSPACE/packages" package/$package -j1
            make REPO="$GITHUB_WORKSPACE/packages" MELANGE_EXTRA_OPTS="--keyring-append=/gcsfuse/enterprise-registry/chainguard-enterprise.rsa.pub" test/$package -j1
          done

      - name: Check for file
        id: file_check
        run: |
          if test -f "packages.log"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Identify newly built packages
        id: list_built_packages
        if: ${{ steps.file_check.outputs.exists == 'true'}}
        run: |
          {
            echo 'files_to_upload<<EOF'

            awk -F'|' '{ printf "./packages/%s/%s-%s.apk\n", $1, $3, $4}' < packages.log

            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: "Check that packages can be installed with apk add"
        run: |
          # Create a fake linux fs under /tmp/emptyroot to pass to `apk --root`.
          mkdir -p /tmp/emptyroot/etc/apk
          cp -r /etc/apk/* /tmp/emptyroot/etc/apk/
          cat /dev/null > /tmp/emptyroot/etc/apk/world

          mkdir -p /tmp/emptyroot/lib/apk/db
          touch /tmp/emptyroot/lib/apk/db/{installed,lock,scripts.tar,triggers}

          mkdir -p /tmp/emptyroot/var/cache/apk
          apk update --root /tmp/emptyroot

          # Find .apk files and add them to the string
          for f in $(echo "${{ steps.list_built_packages.outputs.files_to_upload }}"); do
              tar -Oxf $f .PKGINFO
              apk add --root /tmp/emptyroot --repository ./packages --allow-untrusted --simulate $f
          done

      - name: Check sonames
        if: ${{ steps.file_check.outputs.exists == 'true'}}
        run: |
          wolfictl check so-name

      - name: Check diff
        if: ${{ steps.file_check.outputs.exists == 'true'}}
        # Let's not fail the whole job if this step fails as it is for improved UX rather than an enforced check
        continue-on-error: true
        run: |
          wolfictl check diff

      - name: 'Upload built packages to GitHub artifacts'
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          path: |
            ${{ steps.list_built_packages.outputs.files_to_upload }}
            ./packages.log
          name: packages-${{ matrix.arch }}
          retention-days: 1
          if-no-files-found: warn

  scan:
    name: "Scan packages for CVEs"
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/wolfi-dev/sdk:latest@sha256:faf2d69b08630162837a98d3e83f7c129a0322cb8236ac46f9e2e3e5fd2300ee
    needs: build
    if: needs.build.outputs.packages_were_built == 'true'

    permissions:
      contents: read # Needed to clone the repository
      id-token: write # Needed to federate with octo-sts

    steps:
      - name: 'Retrieve x86_64 packages'
        uses: actions/download-artifact@21e5c25de9cf2ee24742cd3e822327f3be6dd2a3 # v4.1.1
        with:
          name: packages-x86_64
          path: /tmp/artifacts-1/

      - name: 'Retrieve aarch64 packages'
        uses: actions/download-artifact@21e5c25de9cf2ee24742cd3e822327f3be6dd2a3 # v4.1.1
        with:
          name: packages-aarch64
          path: /tmp/artifacts-2/

      - name: 'Collect packages from all architectures into one place'
        run: |
          cd /tmp/artifacts-1

          # Put the packages into one place (if aarch64 logs exist)
          if test -f "/tmp/artifacts-2/packages"; then
            mv /tmp/artifacts-2/packages/* ./packages/
            # Merge the build log ("packages.log") files
            cat /tmp/artifacts-2/packages.log >> ./packages.log
          fi

      - uses: chainguard-dev/octo-sts-action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
        id: octo-sts
        with:
          scope: chainguard-dev
          identity: enterprise-presubmit-build

      - name: 'Retrieve enterprise advisory data'
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          repository: 'chainguard-dev/enterprise-advisories'
          path: 'data/enterprise-advisories'
          ref: 'main'
          token: ${{ steps.octo-sts.outputs.token }}

      - name: Scan for CVEs
        run: |
          wolfictl scan \
            --build-log \
            --advisories-repo-dir 'data/enterprise-advisories' \
            --advisory-filter 'resolved' \
            --require-zero \
            /tmp/artifacts-1 \
            2> /dev/null # The error message renders strangely on GitHub Actions, and the important information is already being sent to stdout.
