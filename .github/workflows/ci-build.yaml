name: Enterprise - build

on:
  push:
    branches:
      - gh-readonly-queue/main/**
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Test building of packages
    runs-on:
      group: cgi-builder-${{ matrix.arch }}

    strategy:
      matrix:
        arch: ["x86_64", "aarch64"]
      fail-fast: false

    container:
      image: ghcr.io/wolfi-dev/sdk:latest@sha256:d1d9112ba405077785787e5c0f97c3f544e7e2f786292040aa908e29ca48ca25
      # TODO: Deprivilege
      options: |
        --cap-add NET_ADMIN --cap-add SYS_ADMIN --device /dev/fuse --security-opt seccomp=unconfined --security-opt apparmor:unconfined

    permissions:
      packages: read
      contents: read
      pull-requests: read
      id-token: write

    env:
      PROJECT: prod-images-c6e5
      FQ_SERVICE_ACCOUNT: prod-images-ci@prod-images-c6e5.iam.gserviceaccount.com

    outputs:
      packages_were_built: ${{ steps.file_check.outputs.exists }}

    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: "recursive"
          token: ${{ secrets.ENTERPRISE_GRAFANA_ADVISORY_ACCESS }}

      - name: "Trust the github workspace"
        run: |
          # This is to avoid fatal errors about "dubious ownership" because we are
          # running inside of a container action with the workspace mounted in.
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Generate snapshot date
        id: snapshot-date
        run: |
          echo "date=$(date -u +%Y%m%d)" >> "$GITHUB_OUTPUT"
          echo "epoch=$(date -u +%s)" >> "$GITHUB_OUTPUT"
        shell: bash

      - uses: google-github-actions/auth@67e9c72af6e0492df856527b474995862b7b6591 # v2.0.0
        with:
          workload_identity_provider: "projects/618116202522/locations/global/workloadIdentityPools/prod-shared-e350/providers/prod-shared-gha"
          service_account: ${{ env.FQ_SERVICE_ACCOUNT }}

      - name: "Generate local signing key"
        run: |
          make MELANGE="melange" local-melange-enterprise.rsa

          # Touch it with the epoch date to convince `make` that we don't need to
          # rebuild the targets that depend on this (all)
          touch -d @0 local-melange-enterprise.rsa

      - name: 'Prepare package repository'
        run: |
          # yay wolfi!
          apk add gcsfuse

          # Set up a gcsfuse RO mount to the public bucket. This is a cheap and
          # cheerful way to recreate the make targets (class A HEADs) locally
          # without syncing the whole bucket (class A+B).
          mkdir -p /gcsfuse/enterprise-registry
          gcsfuse -o ro --implicit-dirs --only-dir os chainguard-enterprise-registry-destination /gcsfuse/enterprise-registry

          mkdir -p ./packages/${{ matrix.arch }}
          # Symlink the gcsfuse mount to ./packages/ and the pub key to workaround the Makefile CWD assumptions
          ln -s /gcsfuse/enterprise-registry/${{ matrix.arch }}/*.apk ./packages/${{ matrix.arch }}/

          # Make a copy of the APKINDEX.* since we'll need to write to it on package builds
          cp /gcsfuse/enterprise-registry/${{ matrix.arch }}/APKINDEX.* ./packages/${{ matrix.arch }}/

      - name: 'Build Enterprise Packages'
        run: |
          make \
            ARCH=${{ matrix.arch }} \
            MELANGE_EXTRA_OPTS="--create-build-log --keyring-append=/gcsfuse/enterprise-registry/chainguard-enterprise.rsa.pub REPO=./packages" \
            all -j1

      - name: Check for file
        id: file_check
        run: |
          if test -f "packages.log"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Identify newly built packages
        id: list_built_packages
        if: ${{ steps.file_check.outputs.exists == 'true'}}
        run: |
          {
            echo 'files_to_upload<<EOF'

            awk -F'|' '{ printf "./packages/%s/%s-%s.apk\n", $1, $3, $4}' < packages.log

            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Check sonames
        if: ${{ steps.file_check.outputs.exists == 'true'}}
        run: |
          wolfictl check so-name

      - name: Check diff
        if: ${{ steps.file_check.outputs.exists == 'true'}}
        # Let's not fail the whole job if this step fails as it is for improved UX rather than an enforced check
        continue-on-error: true
        run: |
          wolfictl check diff

      - name: 'Upload built packages to GitHub artifacts'
        uses: actions/upload-artifact@v3
        with:
          path: |
            ${{ steps.list_built_packages.outputs.files_to_upload }}
            ./packages.log
          name: packages-${{ matrix.arch }}
          retention-days: 1
          if-no-files-found: warn

  scan:
    name: "Scan packages for CVEs"
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/wolfi-dev/sdk:latest@sha256:d1d9112ba405077785787e5c0f97c3f544e7e2f786292040aa908e29ca48ca25
    needs: build
    if: needs.build.outputs.packages_were_built == 'true'

    steps:
      - name: 'Retrieve x86_64 packages'
        uses: actions/download-artifact@v3
        with:
          name: packages-x86_64
          path: /tmp/artifacts-1/

      - name: 'Retrieve aarch64 packages'
        uses: actions/download-artifact@v3
        with:
          name: packages-aarch64
          path: /tmp/artifacts-2/

      - name: 'Collect packages from all architectures into one place'
        run: |
          cd /tmp/artifacts-1

          # Put the packages into one place
          mv /tmp/artifacts-2/packages/* ./packages/

          # Merge the build log ("packages.log") files
          cat /tmp/artifacts-2/packages.log >> ./packages.log

      - name: 'Retrieve enterprise advisory data'
        uses: actions/checkout@v4
        with:
          repository: 'chainguard-dev/enterprise-advisories'
          path: 'data/enterprise-advisories'
          ref: 'main'
          token: ${{ secrets.ENTERPRISE_GRAFANA_ADVISORY_ACCESS }}

      - name: Scan for CVEs
        run: |
          wolfictl scan \
            --build-log \
            --advisories-repo-dir 'data/enterprise-advisories' \
            --advisory-filter 'all' \
            --require-zero \
            /tmp/artifacts-1 \
            2> /dev/null # The error message renders strangely on GitHub Actions, and the important information is already being sent to stdout.
