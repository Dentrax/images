diff --git a/crypto/fips1402/src/main/java/org/keycloak/crypto/fips/KeycloakFipsSecurityProvider.java b/crypto/fips1402/src/main/java/org/keycloak/crypto/fips/KeycloakFipsSecurityProvider.java
index a1cc5f952d..7be7de25f2 100644
--- a/crypto/fips1402/src/main/java/org/keycloak/crypto/fips/KeycloakFipsSecurityProvider.java
+++ b/crypto/fips1402/src/main/java/org/keycloak/crypto/fips/KeycloakFipsSecurityProvider.java
@@ -40,21 +40,28 @@ public class KeycloakFipsSecurityProvider extends Provider {
     }
 
     public static String isSystemFipsEnabled() {
-        Method isSystemFipsEnabled = null;
-
-        try {
-            Class<?> securityConfigurator = KeycloakFipsSecurityProvider.class.getClassLoader().loadClass("java.security.SystemConfigurator");
-            isSystemFipsEnabled = securityConfigurator.getDeclaredMethod("isSystemFipsEnabled");
-            isSystemFipsEnabled.setAccessible(true);
-            boolean isEnabled = (boolean) isSystemFipsEnabled.invoke(null);
-            return isEnabled ? "enabled" : "disabled";
-        } catch (Throwable ignore) {
-            logger.debug("Could not detect if FIPS is enabled from the host", ignore);
-            return "unknown";
-        } finally {
-            if (isSystemFipsEnabled != null) {
-                isSystemFipsEnabled.setAccessible(false);
-            }
-        }
+        // NOTE: Patched by Chainguard.
+        // Keycloak assumes it is running on RHEL, which includes a RHEL patched version of
+        // the JDK. This FIPS check is not appliciable outside RHEL, and results in errors printed
+        // in the DEBUG log. Whilst this does not affect functionality, it may cause confusion with
+        // our FIPS enabled image, where both the system installed JDK and KeyClock are configured
+        // with bcfips modules on wolfi. This patch simply returns "enabled".
+        //
+        // Method isSystemFipsEnabled = null;
+        // try {
+        //     Class<?> securityConfigurator = KeycloakFipsSecurityProvider.class.getClassLoader().loadClass("java.security.SystemConfigurator");
+        //     isSystemFipsEnabled = securityConfigurator.getDeclaredMethod("isSystemFipsEnabled");
+        //     isSystemFipsEnabled.setAccessible(true);
+        //     boolean isEnabled = (boolean) isSystemFipsEnabled.invoke(null);
+        //     return isEnabled ? "enabled" : "disabled";
+        // } catch (Throwable ignore) {
+        //     logger.debug("Could not detect if FIPS is enabled from the host", ignore);
+        //     return "unknown";
+        // } finally {
+        //     if (isSystemFipsEnabled != null) {
+        //         isSystemFipsEnabled.setAccessible(false);
+        //     }
+        // }
+        return "enabled";
     }
 }
