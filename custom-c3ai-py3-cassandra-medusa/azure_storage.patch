diff --git a/medusa/storage/azure_storage.py b/medusa/storage/azure_storage.py
index d44484b..2a3e2c3 100644
--- a/medusa/storage/azure_storage.py
+++ b/medusa/storage/azure_storage.py
@@ -29,6 +29,7 @@ from medusa.storage.abstract_storage import AbstractStorage, AbstractBlob, Abstr
 from pathlib import Path
 from retrying import retry
 
+from azure.identity import DefaultAzureCredential
 
 ManifestObject = collections.namedtuple('ManifestObject', ['path', 'size', 'MD5'])
 
@@ -38,18 +39,22 @@ MAX_UP_DOWN_LOAD_RETRIES = 5
 class AzureStorage(AbstractStorage):
 
     def __init__(self, config):
-
+        storage_account = ""
         credentials_file = Path(config.key_file).expanduser()
         with open(credentials_file, "r") as f:
             credentials_dict = json.loads(f.read())
-            self.credentials = AzureNamedKeyCredential(
-                name=credentials_dict["storage_account"],
-                key=credentials_dict["key"]
-            )
-        self.account_name = self.credentials.named_key.name
+            # self.credentials = AzureNamedKeyCredential(
+            #     name=credentials_dict["storage_account"],
+            #     key=credentials_dict["key"]
+            # )
+            storage_account = credentials_dict["storage_account"]
+
+        #self.account_name = self.credentials.named_key.name
         self.bucket_name = config.bucket_name
 
         self.azure_blob_service_url = self._make_blob_service_url(self.account_name, config)
+        self.account_name = storage_account
+        self.credentials = DefaultAzureCredential()
 
         # disable chatty loggers
         logging.getLogger('azure.core.pipeline.policies.http_logging_policy').setLevel(logging.WARNING)
@@ -66,6 +71,13 @@ class AzureStorage(AbstractStorage):
         return url
 
     def connect(self):
+
+        # Make sure that an asyncio event loop exists for the current thread,
+        # because DefaultAzureCredential() from Azure SDK calls asyncio.get_event_loop() behind the scene.
+        # If the event loop doesn't exist, the exception 'There is no current event loop in thread' will be thrown
+        # and the backup will fail.
+        _ = self.get_or_create_event_loop()
+
         self.azure_blob_service = BlobServiceClient(
             account_url=self.azure_blob_service_url,
             credential=self.credentials,
             